{
  "hash": "a1889952400669bfb5be975c728d9a59",
  "result": {
    "markdown": "\\newcommand{\\tr}{\\mathrm{tr}}\n\\newcommand{\\rank}{\\mathrm{rank}}\n\\newcommand{\\plim}{\\operatornamewithlimits{plim}}\n\\newcommand{\\diag}{\\mathrm{diag}}\n\\newcommand{\\bm}[1]{\\boldsymbol{\\mathbf{#1}}}\n\\newcommand{\\Var}{\\mathrm{Var}}\n\\newcommand{\\Exp}{\\mathrm{E}}\n\\newcommand{\\Cov}{\\mathrm{Cov}}\n\\newcommand\\given[1][]{\\:#1\\vert\\:}\n\\newcommand{\\irow}[1]{%\n\\begin{pmatrix}#1\\end{pmatrix}\n}\n\n# Refresher\n\n### Required packages {.unnumbered}\n\n\n\n::: {.cell hash='01_refresher_cache/pdf/unnamed-chunk-1_22b92d6e667aea4f5cd14f9d11e9a483'}\n\n```{.r .cell-code}\npkgs <- c(\"sf\", \"gstat\", \"mapview\", \"nngeo\", \"rnaturalearth\", \"dplyr\",\n          \"nomisr\", \"osmdata\", \"tidyr\", \"texreg\") \nlapply(pkgs, require, character.only = TRUE)\n```\n:::\n\n\n\n### Session info {.unnumbered}\n\n\n\n::: {.cell hash='01_refresher_cache/pdf/unnamed-chunk-2_4132c858bf22f8639b92efc05307d747'}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United Kingdom.utf8 \n[2] LC_CTYPE=English_United Kingdom.utf8   \n[3] LC_MONETARY=English_United Kingdom.utf8\n[4] LC_NUMERIC=C                           \n[5] LC_TIME=English_United Kingdom.utf8    \n\ntime zone: Europe/Berlin\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] texreg_1.39.3       tidyr_1.3.1         osmdata_0.2.5      \n [4] nomisr_0.4.7        dplyr_1.1.4         rnaturalearth_1.0.1\n [7] nngeo_0.4.8         mapview_2.11.2      gstat_2.1-1        \n[10] sf_1.0-16          \n\nloaded via a namespace (and not attached):\n [1] xfun_0.45          raster_3.6-26      htmlwidgets_1.6.4  lattice_0.22-6    \n [5] vctrs_0.6.5        tools_4.4.1        crosstalk_1.2.1    generics_0.1.3    \n [9] stats4_4.4.1       tibble_3.2.1       proxy_0.4-27       spacetime_1.3-1   \n[13] fansi_1.0.6        xts_0.14.0         pkgconfig_2.0.3    KernSmooth_2.23-24\n[17] satellite_1.0.5    data.table_1.15.4  leaflet_2.2.2      lifecycle_1.0.4   \n[21] compiler_4.4.1     FNN_1.1.4          rsdmx_0.6-3        munsell_0.5.1     \n[25] terra_1.7-78       codetools_0.2-20   snakecase_0.11.1   htmltools_0.5.8.1 \n[29] class_7.3-22       pillar_1.9.0       classInt_0.4-10    tidyselect_1.2.1  \n[33] digest_0.6.35      purrr_1.0.2        fastmap_1.2.0      grid_4.4.1        \n[37] colorspace_2.1-0   cli_3.6.2          magrittr_2.0.3     base64enc_0.1-3   \n[41] XML_3.99-0.16.1    utf8_1.2.4         leafem_0.2.3       e1071_1.7-14      \n[45] scales_1.3.0       sp_2.1-4           rmarkdown_2.27     httr_1.4.7        \n[49] zoo_1.8-12         png_0.1-8          evaluate_0.24.0    knitr_1.47        \n[53] rlang_1.1.4        Rcpp_1.0.12        glue_1.7.0         DBI_1.2.3         \n[57] rstudioapi_0.16.0  jsonlite_1.8.8     R6_2.5.1           plyr_1.8.9        \n[61] intervals_0.15.4   units_0.8-5       \n```\n:::\n:::\n\n\n\n\n## Packages\n\n*Please make sure that you have installed the following packages*:\n\n\n\n::: {.cell hash='01_refresher_cache/pdf/unnamed-chunk-3_c4e21c0f5de5eaa0e5848bc6a36fd46d'}\n\n```{.r .cell-code}\npks <- c(\"dplyr\",\n\"gstat\",\n\"mapview\",\n\"nngeo\",\n\"nomisr\",\n\"osmdata\",\n\"rnaturalearth\",\n\"sf\",\n\"spatialreg\",\n\"spdep\",\n\"texreg\",\n\"tidyr\",\n\"tmap\",\n\"viridisLite\")\n```\n:::\n\n\n\nThe most important package is [sf: Simple Features for R](https://r-spatial.github.io/sf/). users are strongly encouraged to install the sf binary packages from CRAN. If that does not work, please have a look at the [installation instructions](https://r-spatial.github.io/sf/). It requires software packages GEOS, GDAL and PROJ.\n\n\n## Coordinates\n\nIn general, spatial data is structured like conventional/tidy data (e.g. data.frames, matrices), but has one additional dimension: every observation is linked to some sort of geo-spatial information. Most common types of spatial information are:\n\n-   Points (one coordinate pair)\n\n-   Lines (two coordinate pairs)\n\n-   Polygons (at least three coordinate pairs)\n\n-   Regular grids (one coordinate pair for centroid + raster / grid size)\n\n### Coordinate reference system (CRS)\n\nIn its raw form, a pair of coordinates consists of two numerical values. For instance, the pair `c(51.752595, -1.262801)` describes the location of Nuffield College in Oxford (one point). The fist number represents the latitude (north-south direction), the second number is the longitude (west-east direction), both are in decimal degrees.\n\n![Figure: Latitude and longitude, Source: [Wikipedia](https://en.wikipedia.org/wiki/Geographic_coordinate_system)](fig/lat-long.png)\n\nHowever, we need to specify a reference point for latitudes and longitudes (in the Figure above: equator and Greenwich). For instance, the pair of coordinates above comes from Google Maps which returns GPS coordinates in 'WGS 84' ([EPSG:4326](https://epsg.io/4326)).\n\n\n\n::: {.cell hash='01_refresher_cache/pdf/unnamed-chunk-4_1a2ca38855447f3b2f6970b602cb0715'}\n\n```{.r .cell-code}\n# Coordinate pairs of two locations\ncoords1 <- c(51.752595, -1.262801)\ncoords2 <- c(51.753237, -1.253904)\ncoords <- rbind(coords1, coords2)\n\n# Conventional data frame\nnuffield.df <- data.frame(name = c(\"Nuffield College\", \"Radcliffe Camera\"),\n                          address = c(\"New Road\", \"Radcliffe Sq\"),\n                          lat = coords[,1], lon = coords[,2])\n\nhead(nuffield.df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                    name      address      lat       lon\ncoords1 Nuffield College     New Road 51.75259 -1.262801\ncoords2 Radcliffe Camera Radcliffe Sq 51.75324 -1.253904\n```\n:::\n\n```{.r .cell-code}\n# Combine to spatial data frame\nnuffield.spdf <- st_as_sf(nuffield.df, \n                          coords = c(\"lon\", \"lat\"), # Order is important\n                          crs = 4326) # EPSG number of CRS\n\n# Map\nmapview(nuffield.spdf, zcol = \"name\")\n```\n\n::: {.cell-output-display}\n![](01_refresher_files/figure-pdf/unnamed-chunk-4-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Projected CRS\n\nHowever, different data providers use different CRS. For instance, spatial data in the UK usually uses 'OSGB 1936 / British National Grid' ([EPSG:27700](https://epsg.io/27700)). Here, coordinates are in meters, and projected onto a planar 2D space.\n\nThere are a lot of different CRS projections, and different national statistics offices provide data in different projections. Data providers usually specify which reference system they use. This is important as using the correct reference system and projection is crucial for plotting and manipulating spatial data.\n\nIf you do not know the correct CRS, try starting with a standards CRS like [EPSG:4326](https://epsg.io/4326) if you have decimal degree like coordinates. If it looks like projected coordinates, try searching for the country or region in CRS libraries like [https://epsg.io/](https://epsg.io/). However, you must check if the projected coordinates match their real location, e.g. using `mapview()`.\n\n### Why different projections?\n\nBy now, (most) people agree that [the earth is not flat](https://r-spatial.org/r/2020/06/17/s2.html). So, to plot data on a 2D planar surface and to perform certain operations on a planar world, we need to make some re-projections. Depending on where we are, different re-projections of our data (globe in this case) might work better than others.\n\n\n\n::: {.cell hash='01_refresher_cache/pdf/unnamed-chunk-5_2d51023a4cefebc020e9b23ccb16ce3e'}\n\n```{.r .cell-code}\nworld <- ne_countries(scale = \"medium\", returnclass = \"sf\")\nclass(world)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"sf\"         \"data.frame\"\n```\n:::\n\n```{.r .cell-code}\nst_crs(world)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n:::\n\n```{.r .cell-code}\n# Extract a country and plot in current CRS (WGS84)\nger.spdf <- world[world$name == \"Germany\", ]\nplot(st_geometry(ger.spdf))\n```\n\n::: {.cell-output-display}\n![](01_refresher_files/figure-pdf/unnamed-chunk-5-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# Now, let's transform Germany into a CRS optimized for Iceland\nger_rep.spdf <- st_transform(ger.spdf, crs = 5325)\nplot(st_geometry(ger_rep.spdf))\n```\n\n::: {.cell-output-display}\n![](01_refresher_files/figure-pdf/unnamed-chunk-5-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nDepending on the angle, a 2D projection of the earth looks different. It is important to choose a suitable projection for the available spatial data. For more information on CRS and re-projection, see e.g. @Lovelace.2019 or [Stefan JÃ¼nger](https://stefanjuenger.github.io/) & [Anne-Kathrin Stroppe](https://www.gesis.org/institut/mitarbeitendenverzeichnis/person/Anne-Kathrin.Stroppe)'s [GESIS workshop materials](https://github.com/StefanJuenger/gesis-workshop-geospatial-techniques-R-2023).\n\n## Importing some real world data\n\n`sf` imports many of the most common spatial data files, like geojson, gpkg, or shp.\n\n### London shapefile (polygon)\n\nLet's get some administrative boundaries for London from the [London Datastore](https://data.london.gov.uk/dataset/statistical-gis-boundary-files-london). We use the `sf` package and its funtion `st_read()` to import the data.\n\n\n\n::: {.cell hash='01_refresher_cache/pdf/unnamed-chunk-6_8058f61d162e4111570627d3ed714487'}\n\n```{.r .cell-code}\n# Create subdir (all data withh be stored in \"_data\")\ndn <- \"_data\"\nifelse(dir.exists(dn), \"Exists\", dir.create(dn))\n\n# Download zip file and unzip\ntmpf <- tempfile()\nboundary.link <- \"https://data.london.gov.uk/download/statistical-gis-boundary-files-london/9ba8c833-6370-4b11-abdc-314aa020d5e0/statistical-gis-boundaries-london.zip\"\ndownload.file(boundary.link, tmpf)\nunzip(zipfile = tmpf, exdir = paste0(dn))\nunlink(tmpf)\n```\n:::\n\n::: {.cell hash='01_refresher_cache/pdf/unnamed-chunk-7_ff88a6f7c3114a2c761e5c80f5cf92e0'}\n\n```{.r .cell-code}\ndn <- \"_data\"\n# This is a shapefile\n# We only need the MSOA layer for now\nmsoa.spdf <- st_read(dsn = paste0(dn, \"/statistical-gis-boundaries-london/ESRI\"),\n                     layer = \"MSOA_2011_London_gen_MHW\" # Note: no file ending\n                     )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MSOA_2011_London_gen_MHW' from data source \n  `C:\\work\\Lehre\\Geodata_Spatial_Regression\\_data\\statistical-gis-boundaries-london\\ESRI' \n  using driver `ESRI Shapefile'\nSimple feature collection with 983 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 503574.2 ymin: 155850.8 xmax: 561956.7 ymax: 200933.6\nProjected CRS: OSGB36 / British National Grid\n```\n:::\n:::\n\n\n\nThe object `msoa.spdf` is our spatial data.frame. It looks essentially like a conventional data.frame, but has some additional attributes and geo-graphical information stored with it. Most importantly, notice the column `geometry`, which contains a list of polygons. In most cases, we have one polygon for each line / observation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(msoa.spdf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   MSOA11CD                 MSOA11NM   LAD11CD              LAD11NM   RGN11CD\n1 E02000001       City of London 001 E09000001       City of London E12000007\n2 E02000002 Barking and Dagenham 001 E09000002 Barking and Dagenham E12000007\n3 E02000003 Barking and Dagenham 002 E09000002 Barking and Dagenham E12000007\n4 E02000004 Barking and Dagenham 003 E09000002 Barking and Dagenham E12000007\n5 E02000005 Barking and Dagenham 004 E09000002 Barking and Dagenham E12000007\n6 E02000007 Barking and Dagenham 006 E09000002 Barking and Dagenham E12000007\n  RGN11NM USUALRES HHOLDRES COMESTRES POPDEN HHOLDS AVHHOLDSZ\n1  London     7375     7187       188   25.5   4385       1.6\n2  London     6775     6724        51   31.3   2713       2.5\n3  London    10045    10033        12   46.9   3834       2.6\n4  London     6182     5937       245   24.8   2318       2.6\n5  London     8562     8562         0   72.1   3183       2.7\n6  London     8791     8672       119   50.6   3441       2.5\ngeometry\n1 531667.6, 531647.2, 531626.7, 531667.6, 180535.0, 180532.9, 180539.0, 180535.0, 532135.1, 532158.2, 532252.9, 532293.1, 532310.1, 532419.6, 532435.8, 532445.8, 532572.3, 532634.5, 532619.1, 532746.8, 532883.5, 532946.1, 533078.8, 533195.3, 533204.7, 533230.5, 533410.7, 533352.0, 533443.0, 533460.4, 533499.1, 533604.2, 533611.0, 533743.7, 533782.6, 533803.2, 533837.9, 533842.3, 533807.9, 533649.1, 533602.4, 533551.2, 533556.3, 533483.9, 533420.1, 533403.4, 533434.1, 533395.0, 533385.4, 533382.0, 533236.7, 532916.8, 532643.1, 532474.2, 532274.6, 532279.1, 532217.0, 532016.0, 531625.6, 531145.1, 531147.4, 531074.7, 531127.9, 531112.3, 531172.2, 531133.7, 530966.7, 531158.5, 531186.6, 531275.0, 531410.7, 531521.6, 531554.9, 531627.8, 531796.4, 532022.4, 532082.9, 532105.1, 532089.3, 532071.3, 532135.1, 182198.1, 182151.1, 182179.3, 182068.4, 182003.6, 181998.3, 182003.3, 181957.9, 181938.9, 181926.0, 181847.2, 181786.9, 181715.4, 181894.8, 181840.5, 181970.9, 182000.0, 182082.5, 182037.9, 181739.7, 181755.5, 181669.5, 181582.4, 181418.1, 181411.0, 181261.3, 181161.6, 181053.4, 180857.9, 180789.3, 180767.8, 180733.9, 180815.2, 180812.8, 180778.0, 180758.2, 180691.8, 180649.9, 180623.2, 180515.2, 180516.5, 180510.7, 180573.3, 180594.6, 180624.6, 180677.0, 180742.3, 180789.8, 180749.4, 180800.8, 180798.0, 180782.1, 180882.2, 180990.3, 181049.5, 181104.3, 181124.6, 181279.0, 181596.7, 181603.5, 181599.9, 181581.1, 181576.1, 181639.8, 181659.3, 181695.7, 181784.5, 181893.5, 181911.8, 182011.2, 182077.0, 182159.6, 182198.1\nn3                                         549102.4, 548954.5, 548889.7, 548874.2, 548952.5, 548954.4, 548946.4, 549019.1, 549051.7, 549085.6, 548972.7, 548871.1, 548880.3, 548881.2, 548919.3, 549019.5, 549057.9, 549099.6, 549057.4, 548997.8, 549009.9, 548956.7, 548911.0, 548895.8, 548836.2, 548849.4, 548884.3, 548798.8, 548754.9, 548587.0, 548651.2, 548410.4, 548307.5, 548205.4, 548113.3, 547828.7, 547706.5, 547682.9, 547704.3, 547699.6, 547700.9, 547721.5, 547746.5, 547715.1, 547700.3, 547764.8, 547817.9, 547767.6, 547701.8, 547662.6, 547656.6, 547655.1, 547642.4, 547697.0, 547804.4, 547960.3, 548058.5, 548044.0, 548044.6, 548079.0, 548114.1, 548234.9, 548394.1, 548397.1, 548357.8, 548344.0, 548443.9, 548452.0, 548462.0, 548466.0, 548481.9, 548464.4, 549121.0, 549120.8, 549102.4, 189324.6, 189063.2, 189065.7, 188496.2, 188492.3, 188246.3, 188214.2, 188228.3, 187899.8, 187836.7, 187816.6, 187799.0, 187766.3, 187727.4, 187717.8, 187715.0, 187664.8, 187656.1, 187578.5, 187577.1, 187528.1, 187476.1, 187463.3, 187495.6, 187479.0, 187412.7, 187278.5, 187271.9, 187368.4, 187432.0, 187581.6, 187606.0, 187596.6, 187517.0, 187469.0, 187450.8, 187444.4, 187443.2, 187598.1, 187618.6, 187707.7, 187759.0, 187885.7, 187914.5, 188007.7, 188024.1, 188037.6, 188214.7, 188170.1, 188271.9, 188376.2, 188431.4, 188528.7, 188556.9, 188626.8, 188743.2, 188751.7, 188793.3, 188924.2, 188930.0, 188728.0, 188749.5, 188776.6, 188848.7, 188845.1, 188916.1, 188953.8, 189024.7, 189132.0, 189263.0, 189556.8, 189672.7, 189772.3, 189640.2, 189324.6\n4                                                                                                                                                                                                                                                                                                                                                                                                                 551550.0, 551478.0, 551441.7, 551397.2, 551528.4, 551543.0, 551526.7, 551572.3, 551554.4, 551619.4, 551740.0, 551779.9, 551943.8, 551905.8, 551765.0, 551670.8, 551204.5, 551197.9, 550485.1, 550425.2, 550335.8, 550247.1, 550200.7, 550239.0, 550531.5, 550406.2, 550272.8, 550244.1, 550171.0, 550134.7, 550106.5, 550121.0, 550076.0, 550100.0, 550064.6, 550083.7, 550141.2, 550140.0, 550167.1, 550299.4, 550295.0, 550324.1, 550350.4, 550380.5, 550414.1, 550429.2, 550413.7, 550411.0, 550392.6, 550500.4, 550519.0, 550739.3, 550978.8, 551129.7, 551430.6, 551551.6, 551550.0, 187364.6, 187263.7, 187137.0, 186966.9, 186852.2, 186762.3, 186570.8, 186477.1, 186432.7, 186429.7, 186318.5, 186178.4, 186027.7, 185894.1, 185746.5, 185446.8, 185301.9, 185502.7, 185441.1, 185385.0, 185516.6, 185658.5, 185624.8, 185744.4, 185756.4, 185898.1, 185953.1, 185994.0, 185971.0, 185957.3, 185984.5, 186019.8, 186039.5, 186065.0, 186096.4, 186125.6, 186101.6, 186225.4, 186262.4, 186255.3, 186375.0, 186374.3, 186269.7, 186430.0, 186481.0, 186734.1, 186968.6, 187021.3, 187189.0, 187258.3, 187270.0, 187373.8, 187347.3, 187363.3, 187345.3, 187445.2, 187364.6\n5                                                                                                                                                                                     549099.6, 549161.4, 549210.3, 549418.6, 549145.8, 549138.7, 549135.0, 549128.7, 548983.4, 548970.8, 548933.1, 548958.3, 548992.2, 549027.3, 549074.5, 549156.0, 549153.0, 549153.9, 549077.1, 549026.8, 548950.0, 548933.9, 548829.6, 548787.2, 548741.3, 548693.7, 548675.6, 548724.9, 548708.2, 548697.8, 548802.6, 548816.9, 548637.0, 548619.9, 548479.9, 548477.4, 548423.0, 548219.5, 548136.3, 548171.4, 548152.6, 548058.0, 548080.9, 548046.4, 548065.5, 548166.7, 548172.6, 548183.8, 548179.2, 548201.9, 548262.1, 548205.4, 548307.5, 548410.4, 548651.2, 548587.0, 548754.9, 548798.8, 548884.3, 548849.4, 548836.2, 548895.8, 548911.0, 548956.7, 549009.9, 548997.8, 549057.4, 549099.6, 187656.1, 187625.6, 187648.6, 187442.5, 187382.9, 187195.2, 186976.1, 186912.5, 186875.1, 186589.7, 186439.2, 186426.8, 186459.4, 186392.2, 186436.5, 186429.5, 186380.6, 186255.1, 186262.7, 186159.8, 186174.0, 186160.1, 186002.1, 186018.2, 185971.8, 185979.0, 186019.8, 186041.2, 186124.9, 186138.5, 186261.4, 186283.4, 186272.0, 186270.9, 186263.0, 186320.0, 186385.5, 186424.0, 186451.3, 186545.7, 186621.7, 186664.5, 186752.6, 186780.8, 186815.5, 186868.7, 186879.0, 187040.4, 187081.8, 187084.3, 187090.8, 187517.0, 187596.6, 187606.0, 187581.6, 187432.0, 187368.4, 187271.9, 187278.5, 187412.7, 187479.0, 187495.6, 187463.3, 187476.1, 187528.1, 187577.1, 187578.5, 187656.1\n6                                                                                                                                                                                                                                                                                                                                                                                                                 549819.9, 549950.8, 550250.9, 550392.6, 550411.0, 550413.7, 550429.2, 550414.1, 550380.5, 550350.4, 550324.1, 550295.0, 550299.4, 550167.1, 550140.0, 550141.2, 550083.7, 550064.6, 550100.0, 550076.0, 550121.0, 550106.5, 549955.3, 549892.7, 549899.1, 549912.6, 549604.0, 549341.7, 549285.5, 549140.9, 549100.9, 549023.0, 549001.5, 549020.4, 549089.7, 549143.7, 549039.9, 549052.3, 549026.8, 549077.1, 549153.9, 549153.0, 549156.0, 549074.5, 549027.3, 548992.2, 548958.3, 548933.1, 548970.8, 548983.4, 549128.7, 549135.0, 549138.7, 549145.8, 549418.6, 549547.2, 549819.9, 187080.7, 186961.1, 187148.6, 187189.0, 187021.3, 186968.6, 186734.1, 186481.0, 186430.0, 186269.7, 186374.3, 186375.0, 186255.3, 186262.4, 186225.4, 186101.7, 186125.6, 186096.4, 186065.0, 186039.5, 186019.8, 185984.5, 185936.2, 185973.8, 185885.6, 185841.2, 185773.2, 185800.9, 185796.6, 185788.5, 185827.9, 185817.6, 185872.2, 185931.3, 185924.6, 185959.8, 186065.6, 186131.9, 186159.8, 186262.7, 186255.1, 186380.6, 186429.5, 186436.5, 186392.2, 186459.4, 186426.8, 186439.2, 186589.7, 186875.1, 186912.5, 186976.1, 187195.2, 187382.9, 187442.5, 187336.8, 187080.7\n```\n:::\n:::\n\n\n\nShapefiles are still among the most common formats to store and transmit spatial data, despite them being inefficient (file size and file number). \n\nHowever, `sf` reads everything spatial, such as `geo.json`, which usually is more efficient, but less common (but we're getting there).\n\n\n\n::: {.cell hash='01_refresher_cache/pdf/unnamed-chunk-9_ae99db0842178997532fd656393e3c0d'}\n\n```{.r .cell-code}\n# Download file\nulez.link <- \"https://data.london.gov.uk/download/ultra_low_emissions_zone/936d71d8-c5fc-40ad-a392-6bec86413b48/CentralUltraLowEmissionZone.geojson\"\ndownload.file(ulez.link, paste0(dn, \"/ulez.json\"))\n```\n:::\n\n::: {.cell hash='01_refresher_cache/pdf/unnamed-chunk-10_4a39add00887d35ea50401ba4d251668'}\n\n```{.r .cell-code}\n# Read geo.json\nst_layers(paste0(dn, \"/ulez.json\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDriver: GeoJSON \nAvailable layers:\n                   layer_name geometry_type features fields\n1 CentralUltraLowEmissionZone Multi Polygon        1      4\n                        crs_name\n1 OSGB36 / British National Grid\n```\n:::\n\n```{.r .cell-code}\nulez.spdf <- st_read(dsn = paste0(dn, \"/ulez.json\")) # here dsn is simply the file\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `CentralUltraLowEmissionZone' from data source \n  `C:\\work\\Lehre\\Geodata_Spatial_Regression\\_data\\ulez.json' \n  using driver `GeoJSON'\nSimple feature collection with 1 feature and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 527271.5 ymin: 178041.5 xmax: 533866.3 ymax: 183133.4\nProjected CRS: OSGB36 / British National Grid\n```\n:::\n\n```{.r .cell-code}\nhead(ulez.spdf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 1 feature and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 527271.5 ymin: 178041.5 xmax: 533866.3 ymax: 183133.4\nProjected CRS: OSGB36 / British National Grid\n  fid OBJECTID BOUNDARY Shape_Area                       geometry\n1   1        1 CSS Area   21.37557 MULTIPOLYGON (((531562.7 18...\n```\n:::\n:::\n\n\n\nAgain, this looks like a conventional `data.frame` but has the additional column `geometry` containing the coordinates of each observation. `st_geometry()` returns only the geographic object and `st_drop_geometry()` only the `data.frame` without the coordinates. We can plot the object using `mapview()`.\n\n\n\n::: {.cell hash='01_refresher_cache/pdf/mapview_ab8a1a67ac6d6302e310a629a0ea9dd1'}\n\n```{.r .cell-code}\nmapview(msoa.spdf[, \"POPDEN\"])\n```\n\n::: {.cell-output-display}\n![](01_refresher_files/figure-pdf/mapview-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### Census API (admin units)\n\nNow that we have some boundaries and shapes of spatial units in London, we can start looking for different data sources to populate the geometries.\n\nA good source for demographic data is for instance the 2011 census. Below we use the nomis API to retrieve population data for London, See the [Vignette](https://cran.r-project.org/web/packages/nomisr/vignettes/introduction.html) for more information (Guest users are limited to 25,000 rows per query). Below is a wrapper to avoid some errors with sex and urban-rural cross-tabulation in some of the data.\n\n\n\n::: {.cell hash='01_refresher_cache/pdf/unnamed-chunk-11_0d54b4ee47140cde6eef016d8fbf5f33'}\n\n```{.r .cell-code}\n### For larger request, register and set key\n# Sys.setenv(NOMIS_API_KEY = \"XXX\")\n# nomis_api_key(check_env = TRUE)\n\nx <- nomis_data_info()\n\n# Get London ids\nlondon_ids <- msoa.spdf$MSOA11CD\n\n### Get key statistics ids\n# select requires tables (https://www.nomisweb.co.uk/sources/census_2011_ks)\n# Let's get KS201EW (ethnic group), KS205EW (passport held), and KS402EW (housing tenure)\n\n# Get internal ids\nstats <- c(\"KS201EW\", \"KS402EW\", \"KS205EW\")\noo <- which(grepl(paste(stats, collapse = \"|\"), x$name.value))\nksids <- x$id[oo]\nksids # This are the internal ids\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"NM_608_1\" \"NM_612_1\" \"NM_619_1\"\n```\n:::\n\n```{.r .cell-code}\n### look at meta information\nq <- nomis_overview(ksids[1])\nhead(q)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 2\n  name           value           \n  <chr>          <list>          \n1 analyses       <named list [1]>\n2 analysisname   <chr [1]>       \n3 analysisnumber <int [1]>       \n4 contact        <named list [4]>\n5 contenttypes   <named list [1]>\n6 coverage       <chr [1]>       \n```\n:::\n\n```{.r .cell-code}\na <- nomis_get_metadata(id = ksids[1], concept = \"GEOGRAPHY\", type = \"type\")\na # TYPE297 is MSOA level\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 24 x 3\n   id      label.en                                           description.en    \n   <chr>   <chr>                                              <chr>             \n 1 TYPE265 NHS area teams                                     NHS area teams    \n 2 TYPE266 clinical commissioning groups                      clinical commissi~\n 3 TYPE267 built-up areas including subdivisions              built-up areas in~\n 4 TYPE269 built-up areas                                     built-up areas    \n 5 TYPE273 national assembly for wales electoral regions 2010 national assembly~\n 6 TYPE274 postcode areas                                     postcode areas    \n 7 TYPE275 postcode districts                                 postcode districts\n 8 TYPE276 postcode sectors                                   postcode sectors  \n 9 TYPE277 national assembly for wales constituencies 2010    national assembly~\n10 TYPE279 parishes 2011                                      parishes 2011     \n# i 14 more rows\n```\n:::\n\n```{.r .cell-code}\nb <- nomis_get_metadata(id = ksids[1], concept = \"MEASURES\", type = \"TYPE297\")\nb # 20100 is the measure of absolute numbers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 x 3\n  id    label.en description.en\n  <chr> <chr>    <chr>         \n1 20100 value    value         \n2 20301 percent  percent       \n```\n:::\n\n```{.r .cell-code}\n### Query data in loop over the required statistics\nfor(i in ksids){\n\n  # Determin if data is divided by sex or urban-rural\n  nd <- nomis_get_metadata(id = i)\n  if(\"RURAL_URBAN\" %in% nd$conceptref){\n    UR <- TRUE\n  }else{\n    UR <- FALSE\n  }\n  if(\"C_SEX\" %in% nd$conceptref){\n    SEX <- TRUE\n  }else{\n    SEX <- FALSE\n  }\n\n  # make data request\n  if(UR == TRUE){\n    if(SEX == TRUE){\n      tmp_en <- nomis_get_data(id = i, time = \"2011\",\n                               geography = london_ids, # replace with \"TYPE297\" for all MSOAs\n                               measures = 20100, RURAL_URBAN = 0, C_SEX = 0)\n    }else{\n      tmp_en <- nomis_get_data(id = i, time = \"2011\",\n                               geography = london_ids, # replace with \"TYPE297\" for all MSOAs\n                               measures = 20100, RURAL_URBAN = 0)\n    }\n  }else{\n    if(SEX == TRUE){\n      tmp_en <- nomis_get_data(id = i, time = \"2011\",\n                               geography = london_ids, # replace with \"TYPE297\" for all MSOAs\n                               measures = 20100, C_SEX = 0)\n    }else{\n      tmp_en <- nomis_get_data(id = i, time = \"2011\",\n                               geography = london_ids, # replace with \"TYPE297\" for all MSOAs\n                               measures = 20100)\n    }\n\n  }\n\n  # Append (in case of different regions)\n  ks_tmp <- tmp_en\n\n  # Make lower case names\n  names(ks_tmp) <- tolower(names(ks_tmp))\n  names(ks_tmp)[names(ks_tmp) == \"geography_code\"] <- \"msoa11\"\n  names(ks_tmp)[names(ks_tmp) == \"geography_name\"] <- \"name\"\n\n  # replace weird cell codes\n  onlynum <- which(grepl(\"^[[:digit:]]+$\", ks_tmp$cell_code))\n  if(length(onlynum) != 0){\n    code <- substr(ks_tmp$cell_code[-onlynum][1], 1, 7)\n    if(is.na(code)){\n      code <- i\n    }\n    ks_tmp$cell_code[onlynum] <- paste0(code, \"_\", ks_tmp$cell_code[onlynum])\n  }\n\n  # save codebook\n  ks_cb <- unique(ks_tmp[, c(\"date\", \"cell_type\", \"cell\", \"cell_code\", \"cell_name\")])\n\n  ### Reshape\n  ks_res <- tidyr::pivot_wider(ks_tmp, id_cols = c(\"msoa11\", \"name\"),\n                               names_from = \"cell_code\",\n                               values_from = \"obs_value\")\n\n  ### Merge\n  if(i == ksids[1]){\n    census_keystat.df <- ks_res\n    census_keystat_cb.df <- ks_cb\n  }else{\n    census_keystat.df <- merge(census_keystat.df, ks_res, by = c(\"msoa11\", \"name\"), all = TRUE)\n    census_keystat_cb.df <- rbind(census_keystat_cb.df, ks_cb)\n  }\n\n}\n\n\n# Descriptions are saved in the codebook\nsave(census_keystat.df, file = \"_data/Census_ckeystat.RData\")\nsave(census_keystat_cb.df, file = \"_data/Census_codebook.RData\")\n```\n:::\n\n\n\nNow, we have one file containing the geometries of MSOAs and one file with the census information on ethnic groups. Obviously, we can easily merge them together using the MSOA identifiers.\n\n\n\n::: {.cell hash='01_refresher_cache/pdf/unnamed-chunk-12_94b4f32f16fd3786b769099bf7be80be'}\n\n```{.r .cell-code}\nload(\"_data/Census_ckeystat.RData\")\nmsoa.spdf <- merge(msoa.spdf, census_keystat.df,\n                   by.x = \"MSOA11CD\", by.y = \"msoa11\", all.x = TRUE)\n```\n:::\n\n\n\nAnd we can, for instance, plot the spatial distribution of ethnic groups.\n\n\n\n::: {.cell hash='01_refresher_cache/pdf/unnamed-chunk-13_809274dcf18f62f834cafd195d353956'}\n\n```{.r .cell-code}\nmsoa.spdf$per_white <- msoa.spdf$KS201EW_100 / msoa.spdf$KS201EW0001 * 100\nmsoa.spdf$per_mixed <- msoa.spdf$KS201EW_200 / msoa.spdf$KS201EW0001 * 100\nmsoa.spdf$per_asian <- msoa.spdf$KS201EW_300 / msoa.spdf$KS201EW0001 * 100\nmsoa.spdf$per_black <- msoa.spdf$KS201EW_400 / msoa.spdf$KS201EW0001 * 100\nmsoa.spdf$per_other <- msoa.spdf$KS201EW_500 / msoa.spdf$KS201EW0001 * 100\n\nmapview(msoa.spdf[, \"per_white\"])\n```\n:::\n\n\n\nIf you're interested in more data sources, see for instance [APIs for social scientists: A collaborative review](https://bookdown.org/paul/apis_for_social_scientists/) by Paul C. Bauer, Camille Landesvatter, Lion Behrens. It's a collection of several APIs for social sciences.\n\n### Gridded data\n\nSo far, we have queried data on administrative units. However, often data comes on other spatial scales. For instance, we might be interested in the amount of air pollution, which is provided on a regular grid across the UK from [Defra](https://uk-air.defra.gov.uk/data/pcm-data).\n\n\n\n::: {.cell hash='01_refresher_cache/pdf/unnamed-chunk-14_6c6bbe471f9d66b8e04388c90e9e822c'}\n\n```{.r .cell-code}\n# Download\npol.link <- \"https://uk-air.defra.gov.uk/datastore/pcm/mapno22011.csv\"\ndownload.file(pol.link, paste0(dn, \"/mapno22011.csv\"))\n```\n:::\n\n::: {.cell hash='01_refresher_cache/pdf/unnamed-chunk-15_02c4febb915dc545c471ea12255e2083'}\n\n```{.r .cell-code}\npol.df <- read.csv(paste0(dn, \"/mapno22011.csv\"), skip = 5, header = T, sep = \",\",\n                      stringsAsFactors = F, na.strings = \"MISSING\")\n\nhead(pol.df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  ukgridcode      x       y no22011\n1      54291 460500 1221500      NA\n2      54292 461500 1221500      NA\n3      54294 463500 1221500      NA\n4      54979 458500 1220500      NA\n5      54980 459500 1220500      NA\n6      54981 460500 1220500      NA\n```\n:::\n:::\n\n\n\nThe data comes as point data with x and y as coordinates. We have to transform this into spatial data first. We first setup a spatial points object with `st_as_sf`. Subsequently, we transform the point coordinates into a regular grid. We use a buffer method `st_buffer` with \"diameter\", and only one segment per quadrant (`nQuadSegs`). This gives us a 1x1km regular grid.\n\n\n\n::: {.cell hash='01_refresher_cache/pdf/unnamed-chunk-16_b86f07d3098474b9551f42ea4a0f9f52'}\n\n```{.r .cell-code}\n# Build spatial object\npol.spdf <- st_as_sf(pol.df, coords = c(\"x\", \"y\"),\n                    crs = 27700)\n\n# we transform the point coordinates into a regular grid with \"diameter\" 500m\npol.spdf <- st_buffer(pol.spdf, dist = 500, nQuadSegs  = 1,\n                      endCapStyle = 'SQUARE')\n\n# Plot NO2\nplot(pol.spdf[, \"no22011\"], border = NA)\n```\n\n::: {.cell-output-display}\n![](01_refresher_files/figure-pdf/unnamed-chunk-16-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### OpenStreetMap (points)\n\nAnother interesting data source is the OpenStreetMap API, which provides information about the geographical location of a serious of different indicators. Robin Lovelace provides a nice introduction to the [osmdata API](https://cran.r-project.org/web/packages/osmdata/vignettes/osmdata.html). Available features can be found on [OSM wiki](https://wiki.openstreetmap.org/wiki/Map_features).\n\nFirst we create a bounding box of where we want to query data. `st_bbox()` can be used to get bounding boxes of an existing spatial object (needs `CRS = 4326`). An alternative would be to use `opq(bbox = 'greater london uk')`.\n\n\n\n::: {.cell hash='01_refresher_cache/pdf/unnamed-chunk-17_cd9eaa719d8ae764aef4d8e390777a9f'}\n\n```{.r .cell-code}\n# bounding box of where we want to query data\nq <- opq(bbox = st_bbox(st_transform(msoa.spdf, 4326)))\n```\n:::\n\n\n\nAnd we want to get data for all pubs and bars which are within this bounding box.\n\n\n\n::: {.cell hash='01_refresher_cache/pdf/unnamed-chunk-18_dcdcd573a112704394d60173c9031c58'}\n\n```{.r .cell-code}\n# First build the query of location of pubs in London\nosmq <- add_osm_feature(q, key = \"amenity\", value = \"pub\")\n\n# And then query the data\npubs.osm <- osmdata_sf(osmq)\n```\n:::\n\n\n\nRight now there are some results in polygons, some in points, and they overlap. Often, data from OSM needs some manual cleaning. Sometimes the same features are represented by different spatial objects (e.g. points + polygons).\n\n\n\n::: {.cell hash='01_refresher_cache/pdf/unnamed-chunk-19_9698924a8accbd400dca7190d25bde90'}\n\n```{.r .cell-code}\n# Make unique points / polygons\npubs.osm <- unique_osmdata(pubs.osm)\n\n# Get points and polygons (there are barley any pubs as polygons, so we ignore them)\npubs.points <- pubs.osm$osm_points\npubs.polys <- pubs.osm$osm_multipolygons\n\n# # Drop OSM file\n# rm(pubs.osm); gc()\n\n# Reduce to point object only\npubs.spdf <- pubs.points\n\n# Reduce to a few variables\npubs.spdf <- pubs.spdf[, c(\"osm_id\", \"name\", \"addr:postcode\", \"diet:vegan\")]\n```\n:::\n\n\n\nAgain, we can inspect the results with `mapview`.\n\n\n\n::: {.cell hash='01_refresher_cache/pdf/unnamed-chunk-20_ca8a95b5a935d9a825eda20fd03c3bff'}\n\n:::\n\n::: {.cell hash='01_refresher_cache/pdf/unnamed-chunk-21_5a4fde8780656fc683e585256d4c113b'}\n\n```{.r .cell-code}\nmapview(st_geometry(pubs.spdf))\n```\n\n::: {.cell-output-display}\n![](01_refresher_files/figure-pdf/unnamed-chunk-21-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nNote that OSM is solely based on contribution by users, and the **quality of OSM data varies**. Usually data quality is better in larger cities, and better for more stable features (such as hospitals, train stations, highways) rahter than pubs or restaurants which regularly appear and disappear. However, data from [London Datastore](https://data.london.gov.uk/dataset/cultural-infrastructure-map) would indicate more pubs than what we find with OSM.\n\n### Save\n\nWe will store the created data to use them again in the next session.\n\n\n\n::: {.cell hash='01_refresher_cache/pdf/unnamed-chunk-22_bb171ba1f2ce731c5ae6c70e749df07a'}\n\n```{.r .cell-code}\nsave(msoa.spdf, file = \"_data/msoa_spatial.RData\")\nsave(ulez.spdf, file = \"_data/ulez_spatial.RData\")\nsave(pol.spdf, file = \"_data/pollution_spatial.RData\")\nsave(pubs.spdf, file = \"_data/pubs_spatial.RData\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}