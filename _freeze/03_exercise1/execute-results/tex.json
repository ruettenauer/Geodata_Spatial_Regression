{
  "hash": "30d2714857af2e46c16109f818d9e9a9",
  "result": {
    "markdown": "::: {.content-hidden unless-format=\"html\"}\n$$\n\\newcommand{\\tr}{\\mathrm{tr}}\n\\newcommand{\\rank}{\\mathrm{rank}}\n\\newcommand{\\plim}{\\operatornamewithlimits{plim}}\n\\newcommand{\\diag}{\\mathrm{diag}}\n\\newcommand{\\bm}[1]{\\boldsymbol{\\mathbf{#1}}}\n\\newcommand{\\Var}{\\mathrm{Var}}\n\\newcommand{\\Exp}{\\mathrm{E}}\n\\newcommand{\\Cov}{\\mathrm{Cov}}\n\\newcommand\\given[1][]{\\:#1\\vert\\:}\n\\newcommand{\\irow}[1]{%\n\\begin{pmatrix}#1\\end{pmatrix}\n}\n$$\n:::\n\n# Exercises I\n\n### Required packages {.unnumbered}\n\n\n\n::: {.cell hash='03_exercise1_cache/pdf/unnamed-chunk-1_cc0bc773b09a534cd1c702cc863efc42'}\n\n```{.r .cell-code}\npkgs <- c(\"sf\", \"mapview\", \"spdep\", \"spatialreg\", \"tmap\", \"viridisLite\",\n          \"ggplot2\", \"ggthemes\") # note: load spdep first, then spatialreg\nlapply(pkgs, require, character.only = TRUE)\n```\n:::\n\n\n\n### Session info {.unnumbered}\n\n\n\n::: {.cell hash='03_exercise1_cache/pdf/unnamed-chunk-2_52063a05162a90818948655bf603ec39'}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.4.1 (2024-06-14 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United Kingdom.utf8 \n[2] LC_CTYPE=English_United Kingdom.utf8   \n[3] LC_MONETARY=English_United Kingdom.utf8\n[4] LC_NUMERIC=C                           \n[5] LC_TIME=English_United Kingdom.utf8    \n\ntime zone: Europe/Berlin\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] ggthemes_5.1.0    ggplot2_3.5.1     viridisLite_0.4.2 tmap_3.3-4       \n [5] spatialreg_1.3-4  Matrix_1.7-0      spdep_1.3-5       spData_2.3.1     \n [9] mapview_2.11.2    sf_1.0-16        \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   dplyr_1.1.4        fastmap_1.2.0      leaflet_2.2.2     \n [5] TH.data_1.1-2      XML_3.99-0.16.1    digest_0.6.35      lifecycle_1.0.4   \n [9] LearnBayes_2.15.1  survival_3.6-4     terra_1.7-78       magrittr_2.0.3    \n[13] compiler_4.4.1     rlang_1.1.4        tools_4.4.1        utf8_1.2.4        \n[17] knitr_1.47         htmlwidgets_1.6.4  sp_2.1-4           classInt_0.4-10   \n[21] RColorBrewer_1.1-3 multcomp_1.4-25    abind_1.4-5        KernSmooth_2.23-24\n[25] purrr_1.0.2        withr_3.0.0        leafsync_0.1.0     grid_4.4.1        \n[29] stats4_4.4.1       fansi_1.0.6        e1071_1.7-14       leafem_0.2.3      \n[33] colorspace_2.1-0   scales_1.3.0       MASS_7.3-60.2      dichromat_2.0-0.1 \n[37] cli_3.6.2          mvtnorm_1.2-5      rmarkdown_2.27     generics_0.1.3    \n[41] rstudioapi_0.16.0  tmaptools_3.1-1    DBI_1.2.3          proxy_0.4-27      \n[45] stringr_1.5.1      splines_4.4.1      stars_0.6-5        parallel_4.4.1    \n[49] s2_1.1.6           base64enc_0.1-3    vctrs_0.6.5        boot_1.3-30       \n[53] sandwich_3.1-0     jsonlite_1.8.8     crosstalk_1.2.1    units_0.8-5       \n[57] glue_1.7.0         lwgeom_0.2-14      codetools_0.2-20   stringi_1.8.4     \n[61] gtable_0.3.5       deldir_2.0-4       raster_3.6-26      munsell_0.5.1     \n[65] tibble_3.2.1       pillar_1.9.0       htmltools_0.5.8.1  satellite_1.0.5   \n[69] R6_2.5.1           wk_0.9.1           evaluate_0.24.0    lattice_0.22-6    \n[73] png_0.1-8          class_7.3-22       Rcpp_1.0.12        coda_0.19-4.1     \n[77] nlme_3.1-164       xfun_0.45          zoo_1.8-12         pkgconfig_2.0.3   \n```\n:::\n:::\n\n\n\n### Reload data from pervious session {.unnumbered}\n\n\n\n::: {.cell hash='03_exercise1_cache/pdf/unnamed-chunk-3_8d93bce8a697f38f1c7201446ce2ed09'}\n\n```{.r .cell-code}\nload(\"_data/msoa2_spatial.RData\")\n```\n:::\n\n\n\n\n\n## General Exercises\n\n### 1) Can you import the spatial administrative units of Germany (\"Kreisgrenzen_2020_mit_Einwohnerzahl\" in _data folder) and make a simple plot of the boundaries? {.unnumbered} \n\n\n\n### 2) What is the Coordinate reference system of this German shape file? {.unnumbered}\n\n\n\n\n### 3) Please use the msoa.spdf and calculate a neighbours weights matrix of the nearest 10 neighbours (see `spdep::knearneigh()`), and create a listw object using row normalization. {.unnumbered}\n\n\n\n### 4) OPTIONAL: Can you create a map containing the City of London (MSOA11CD = \"E02000001\") and its ten nearest neighbours? {.unnumbered}\n\n\n\n\n### 5) Please use the msoa.spdf and calculate a neighbours weights matrix of the nearest 10 neighbours (see `spdep::knearneigh()`), and create a listw object using row normalization. {.unnumbered}\n\n\n\n\n### 6) Please calculate the queens neighbours and make a listw object that includes the second order neighbours (see `nblag()`). {.unnumbered}\n\n\n\n### 7) Generate a matrix from the listw object {.unnumbered}\n\n\n\n### 8) What do you get when you multiply a variable (data column) such as the home owner rate with your weights matrix? {.unnumbered}\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}